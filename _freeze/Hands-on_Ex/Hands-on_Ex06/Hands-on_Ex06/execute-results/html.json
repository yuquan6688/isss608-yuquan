{
  "hash": "1695801a41cbf5dae5e43373ed8dac8b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hand-on Exercise 6 --- Visualising and Analysing Time-oriented Data\"\nauthor: \"Li Yuquan\"\ndescription: \"\"\ndate: \"May 18, 2025\"\ndate-modified: \"last-modified\"\nformat: html\neditor: visual\nimage: images/fm.png\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# 1 Overview\n\nBy the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\n-   plotting a calender heatmap by using ggplot2 functions,\n\n-   plotting a cycle plot by using ggplot2 function,\n\n-   plotting a slopegraph\n\n-   plotting a horizon chart\n\nIn this section, I will learn how to plot a calender heatmap programmatically by using ggplot2 package.![](images/Screenshot%202025-05-18%20at%2014.58.27.png)\n\nBy the end of this section, I will be able to:\n\n-   plot a calender heatmap by using ggplot2 functions and extension,\n\n-   to write function using R programming,\n\n-   to derive specific date and time related field by using base R and lubridate packages\n\n-   to perform data preparation task by using tidyr and dplyr packages.\n\n# 2 Getting Start\n\n::: panel-tabset\n## Installing & Launching R Packages\n\ninstall and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(scales, viridis, lubridate, ggthemes,\n               gridExtra, readxl, knitr, data.table,\n               CGPfunctions, ggHoriPlot, tidyverse, ggbump, sunburstR,\n               dplyr, latticeExtra, lattice)\n```\n:::\n\n\n\n## Importing the data\n\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\nFirst, I will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks <- read_csv(\"data/eventlog.csv\")\n```\n:::\n\n\n\n## Data structure\n\nIt is always a good practice to examine the imported data frame before further analysis is performed.\n\nFor example, kable() can be used to review the structure of the imported data frame.\n\nThere are three columns, namely *timestamp*, *source_country* and *tz*.\n\n-   *timestamp* field stores date-time values in POSIXct format.\n\n-   *source_country* field stores the source of the attack. It is in *ISO 3166-1 alpha-2* country code.\n\n-   *tz* field stores time zone of the source IP address.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|timestamp           |source_country |tz              |\n|:-------------------|:--------------|:---------------|\n|2015-03-12 15:59:16 |CN             |Asia/Shanghai   |\n|2015-03-12 16:00:48 |FR             |Europe/Paris    |\n|2015-03-12 16:02:26 |CN             |Asia/Shanghai   |\n|2015-03-12 16:02:38 |US             |America/Chicago |\n|2015-03-12 16:03:22 |CN             |Asia/Shanghai   |\n|2015-03-12 16:03:45 |CN             |Asia/Shanghai   |\n\n\n:::\n:::\n\n\n:::\n\n# 3 Data Preparation\n\n## Step 1: Deriving weekday and hour of day fields\n\nBefore I can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n}\n```\n:::\n\n\n\n::: callout-note\n-   [`ymd_hms()`](https://lubridate.tidyverse.org/reference/ymd_hms.html) and [`hour()`](https://lubridate.tidyverse.org/reference/hour.html) are from [**lubridate**](https://lubridate.tidyverse.org/) package, and\n\n-   [`weekdays()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/weekdays) is a **base** R function.\n:::\n\n## Step 2: Deriving the attacks tibble data frame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n```\n:::\n\n\n\n::: callout-note\nBeside extracting the necessary data into *attacks* data frame, `mutate()` of **dplyr** package is used to convert *wkday* and *hour* fields into **factor** so they’ll be ordered when plotting\n:::\n\n## Step 3: Data structure after prepare\n\nTable below shows the tidy tibble table after processing.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkable(head(attacks))\n```\n\n::: {.cell-output-display}\n\n\n|tz           |source_country |wkday    |hour |\n|:------------|:--------------|:--------|:----|\n|Africa/Cairo |BG             |Saturday |20   |\n|Africa/Cairo |TW             |Sunday   |6    |\n|Africa/Cairo |TW             |Sunday   |8    |\n|Africa/Cairo |CN             |Sunday   |11   |\n|Africa/Cairo |US             |Sunday   |15   |\n|Africa/Cairo |CA             |Monday   |11   |\n\n\n:::\n:::\n\n\n\n# 4 Building the Calendar Heatmaps\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-tip\n-   a tibble data table called *grouped* is derived by aggregating the attack by *wkday* and *hour*fields.\n\n-   a new field called *n* is derived by using `group_by()` and `count()` functions.\n\n-   `na.omit()` is used to exclude missing value.\n\n-   `geom_tile()` is used to plot tiles (grids) at each x and y position. `color` and `size`arguments are used to specify the border color and line size of the tiles.\n\n-   [`theme_tufte()`](https://jrnold.github.io/ggthemes/reference/theme_tufte.html) of [**ggthemes**](https://jrnold.github.io/ggthemes/reference/index.html) package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\n\n-   `coord_equal()` is used to ensure the plot will have an aspect ratio of 1:1.\n\n-   `scale_fill_gradient()` function is used to creates a two colour gradient (low-high).\n:::\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n# 5 Building Multiple Calendar Heatmaps\n\n## Step 1: Deriving attack by country object\n\nIn order to identify the top 4 countries with the highest number of attacks, I will do the followings:\n\n-   count the number of attacks by country,\n\n-   calculate the percent of attackes by country, and\n\n-   save the results in a tibble data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n```\n:::\n\n\n\n## Step 2: Preparing the tidy data frame\n\nIn this step, I am required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n```\n:::\n\n\n\n## Step 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n# 6 Plotting Cycle Plot\n\nIn this section, I will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n![](images/Screenshot%202025-05-18%20at%2015.18.31.png)\n\n## Step 1: Data Import\n\nFor the purpose of this hands-on exercise, *arrivals_by_air.xlsx* will be used.\n\nThe code chunk below imports *arrivals_by_air.xlsx* by using `read_excel()` of **readxl**package and save it as a tibble data frame called *air*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n```\n:::\n\n\n\n## Step 2: Deriving month and year fields\n\nNext, two new fields called month and year are derived from Month-Year field.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n```\n:::\n\n\n\n## Step 3: Extracting the target country\n\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n```\n:::\n\n\n\n## Step 4: Computing year average arrivals by month\n\nThe code chunk below uses `group_by()` and `summarise()` of **dplyr** to compute year average arrivals by month.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n```\n:::\n\n\n\n## Step 5: Plotting the cycle plot\n\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n## Exploration 1\nSunburst diagram displaying hierarchical visitor arrivals from Vietnam, broken down by year and month.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsunburst_data <- Vietnam %>%\n  mutate(path = paste(year, month, sep = \"-\")) %>%\n  group_by(path) %>%\n  summarise(value = sum(`Vietnam`), .groups = \"drop\")\nsunburst_data$path <- gsub(\"-\", \"-\", sunburst_data$path)\nsunburst(sunburst_data)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"sunburst html-widget html-fill-item\" id=\"htmlwidget-0609a1d05bace446b25a\" style=\"width:100%;height:464px; position:relative;\">\n<div>\n<div class=\"sunburst-main\">\n<div class=\"sunburst-sequence\"></div>\n<div class=\"sunburst-chart\">\n<div class=\"sunburst-explanation\" style=\"visibility:hidden;\"></div>\n</div>\n</div>\n<div class=\"sunburst-sidebar\">\n<input type=\"checkbox\" class=\"sunburst-togglelegend\" style=\"visibility:hidden;\">Legend</input>\n<div class=\"sunburst-legend\" style=\"visibility:hidden;\"></div>\n</div>\n</div>\n</div>\n<script type=\"application/json\" data-for=\"htmlwidget-0609a1d05bace446b25a\">{\"x\":{\"data\":{\"children\":[{\"name\":\"2010\",\"children\":[{\"name\":\"Apr\",\"size\":22154,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":25351,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":23002,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":16335,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":15781,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":34020,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":28146,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":18061,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":21461,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":17991,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":20591,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":20105,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2011\",\"children\":[{\"name\":\"Apr\",\"size\":21050,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":23844,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":23650,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":22046,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":16891,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":36526,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":30167,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":19430,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":20422,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":19790,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":20140,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":22842,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2012\",\"children\":[{\"name\":\"Apr\",\"size\":25429,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":27372,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":24950,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":22627,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":22637,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":37527,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":32281,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":24102,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":26039,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":21804,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":22202,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":21864,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2013\",\"children\":[{\"name\":\"Apr\",\"size\":27309,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":28930,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":25421,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":24155,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":19793,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":37861,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":33707,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":23807,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":25326,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":24109,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":24833,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":24113,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2014\",\"children\":[{\"name\":\"Apr\",\"size\":26244,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":35029,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":27369,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":27391,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":22967,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":44613,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":40436,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":26405,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":31407,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":25635,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":26165,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":24965,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2015\",\"children\":[{\"name\":\"Apr\",\"size\":31299,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":32747,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":27128,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":23760,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":24906,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":45043,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":38188,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":27347,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":30131,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":25102,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":26213,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":24834,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2016\",\"children\":[{\"name\":\"Apr\",\"size\":34449,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":38351,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":31285,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":29498,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":25981,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":48958,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":43488,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":28805,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":34454,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":28643,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":27035,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":28041,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2017\",\"children\":[{\"name\":\"Apr\",\"size\":33682,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":43919,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":33860,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":28207,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":31125,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":58349,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":50591,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":31443,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":36844,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":32527,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":33438,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":35317,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2018\",\"children\":[{\"name\":\"Apr\",\"size\":41723,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":49645,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":33778,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":35137,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":31432,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":63476,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":55824,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":35832,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":45269,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":33356,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":36355,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":37341,\"colname\":\"X2\"}],\"colname\":\"X1\"},{\"name\":\"2019\",\"children\":[{\"name\":\"Apr\",\"size\":40569,\"colname\":\"X2\"},{\"name\":\"Aug\",\"size\":51211,\"colname\":\"X2\"},{\"name\":\"Dec\",\"size\":34366,\"colname\":\"X2\"},{\"name\":\"Feb\",\"size\":37778,\"colname\":\"X2\"},{\"name\":\"Jan\",\"size\":29621,\"colname\":\"X2\"},{\"name\":\"Jul\",\"size\":65554,\"colname\":\"X2\"},{\"name\":\"Jun\",\"size\":60425,\"colname\":\"X2\"},{\"name\":\"Mar\",\"size\":36769,\"colname\":\"X2\"},{\"name\":\"May\",\"size\":43176,\"colname\":\"X2\"},{\"name\":\"Nov\",\"size\":40535,\"colname\":\"X2\"},{\"name\":\"Oct\",\"size\":37358,\"colname\":\"X2\"},{\"name\":\"Sep\",\"size\":39766,\"colname\":\"X2\"}],\"colname\":\"X1\"}],\"name\":\"root\"},\"options\":{\"legendOrder\":null,\"colors\":null,\"valueField\":\"size\",\"percent\":true,\"count\":false,\"explanation\":null,\"breadcrumb\":[],\"legend\":[],\"sortFunction\":null,\"sumNodes\":true}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n\n\n## Exploration 2\nHorizon graph visualising monthly visitor arrivals from Vietnam, compressing time-series data into a compact visual form.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam$time <- as.Date(paste(Vietnam$year, Vietnam$month, \"01\", sep = \"-\"), \"%Y-%b-%d\")\n\nhorizonplot(Vietnam$`Vietnam` ~ Vietnam$time,\n            colorkey = TRUE,\n            origin = mean(Vietnam$`Vietnam`),\n            horizonscale = 6,\n            main = \"Horizon Graph of Monthly Visitor Arrivals from Vietnam\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n## Exploration 3\nMulti-series line plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nweekdays <- c(\"Mon\", \"Tues\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\")\nweeks <- paste0(\"Series\", 1:8)\n\nset.seed(123)\ndf <- expand.grid(Day = weekdays, Week = weeks) %>%\n  mutate(Sales = sample(40:120, size = n(), replace = TRUE))\n\ndf$Day <- factor(df$Day, levels = weekdays, ordered = TRUE)\n\nggplot(df, aes(x = Day, y = Sales, group = Week, color = Week)) +\n  geom_line() +\n  geom_point() +\n  labs(\n    title = \"Weekly Sales Pattern by Day of Week\",\n    y = \"Items Sold\", x = NULL\n  ) +\n  theme_minimal() +\n  theme(legend.position = \"right\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\n# 7 Plotting Slopegraph\n\nIn this section I will learn how to plot a [slopegraph](https://www.storytellingwithdata.com/blog/2020/7/27/what-is-a-slopegraph) by using R.\n\nBefore getting start, make sure that **CGPfunctions** has been installed and loaded onto R environment. Then, refer to [Using newggslopegraph](https://cran.r-project.org/web/packages/CGPfunctions/vignettes/Using-newggslopegraph.html) to learn more about the function. Lastly, read more about `newggslopegraph()` and its arguments by referring to this [link](https://www.rdocumentation.org/packages/CGPfunctions/versions/0.6.3/topics/newggslopegraph).\n\n## Step 1: Data Import\n\nImport the rice data set into R environment by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice <- read_csv(\"data/rice.csv\")\n```\n:::\n\n\n\n## Step 2: Plotting the slopegraph\n\nNext, code chunk below will be used to plot a basic slopegraph as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>%\n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(1961, 1980)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\",\n                Caption = \"Prepared by: Dr. Kam Tin Seong\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\n\n## Exploration 4\nhighlighting two specific country.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(2005, 2006, 2007, 2008, 2009, 2010)) %>%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Countries\",\n                SubTitle = \"2005 to 2010\",\n                Caption = NULL,\n                LineColor = c(\"grey50\", \n                              \"grey50\", \n                              \"grey50\", \n                              \"grey50\",\n                              \"red\",\n                              \"grey50\",\n                              \"#c7c\",\n                              \"grey50\",\n                              \"grey50\",\n                              \"grey50\",\n                              \"grey50\"),      \n                DataLabelFillColor = \"#f5f5f5\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-21-1.png){width=960}\n:::\n:::\n\n\n\n## Exploration 5\nBump chart displaying relative ranking changes in rice yield among countries from 2000 to 2010.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrice %>% \n  mutate(Year = factor(Year)) %>%\n  filter(Year %in% c(2000, 2005, 2010)) %>%\n  ggplot(aes(x = Year,\n         y = Yield,\n         color = Country))+\n  geom_point(color = \"#FFFFFF\", size = 1) +\n  ggbump::geom_bump(mapping=aes(x = Year,\n                                y = Yield, \n                                group = Country\n                                ))+\n  labs(title = \"Rice Yield of Top 11 Asian Countries\") +  \n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex06_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/htmltools-fill-0.5.8.1/fill.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/sequences-0.1/sequences.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/sunburst-binding-2.1.8/sunburst.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}