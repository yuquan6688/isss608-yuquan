---
title: "Hands-on_Ex04d--- Visualising Models"
author: "Li Yuquan"
description: ""
date: "May 5, 2024"
date-modified: "last-modified"
format: html
editor: visual
image: ../../images/3afm.png
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1 Introduction

In this section, we will learn how to visualise model diagnostic and model parameters by using parameters package.

# 2 Visual Anaslytics for Building Better Explanatory Models

## 2.1 The case

Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

![](images/image1.jpg)

# 3 Getting Started

:::: panel-tabset
## Install Packages

```{r}
pacman::p_load(readxl, SmartEDA, tidyverse,
               ggstatsplot, easystats, tidymodels,parameters, see)
```

## Import Data

In the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", 
                       "data")
car_resale
```

Notice that the output object car_resale is a tibble data frame.

## Data Overview

::: panel-tabset
### summary()

```{r}
summary(car_resale)
```

### glimpse()

```{r}
glimpse(car_resale)
```

### head()

```{r}
head(car_resale,100)
```
:::
::::

## 3.1 Multiple Regression Model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
model
```

## 3.2 Model Diagnostic: checking for multicolinearity:

In the code chunk, [*check_collinearity()*](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/index.html) package.

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

## 3.3 Model Diagnostic: checking normality assumption

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
```

```{r}
check_n <- check_normality(model1)
```

```{R}
plot(check_n)
```

## 3.4 Model Diagnostic: Check model for homogeneity of variances

In the code chunk, [*check_heteroscedasticity()*](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [**performance**](https://easystats.github.io/performance/index.html) package.

```{r}
check_h <- check_heteroscedasticity(model1)
```

```{r}
plot(check_h)
```

## 3.5 Model Diagnostic: Complete check

We can also perform the complete by using [*check_model()*](https://easystats.github.io/performance/reference/check_model.html).

```{r}
check_model(model1)
```

## 3.6 Visualising Regression Parameters: see methods

In the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.

```{r}
# plot(parameters(model1))
```

## 3.7 Visualising Regression Parameters: ggcoefstats() methods

In the code below, [*ggcoefstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1, 
            output = "plot")
```
