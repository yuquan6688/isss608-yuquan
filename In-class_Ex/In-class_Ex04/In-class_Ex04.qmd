---
title: "In-class Exercise 4"
author: "Li Yuquan"
description: ""
date: "May 17, 2025"
date-modified: "last-modified"
format: html
editor: visual
image: ../../images/i1fm.png
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# loading packages
```{r}
pacman::p_load( tidygraph, ggraph,
                jsonlite, SmartEDA,
                tidyverse)
```

# importing data
```{r}
kg <- fromJSON("data/MC1_graph.json")
```


# Inspect structure
```{r}
str(kg, max.level = 1)
```

# Initial EDA

```{r}
nodes_tbl <- as_tibble(kg$nodes)
edges_tbl <- as_tibble(kg$links)
```

```{r}
ggplot(data = edges_tbl,
       aes(y = `Edge Type`))+
  geom_bar()

```

```{r}
ggplot(data = nodes_tbl,
       aes(y = `Node Type`))+
  geom_bar()

```
# step1 mapping from node id to row index
```{r}
id_map <- tibble(id=nodes_tbl$id,
                 index = seq_len(
                   nrow(nodes_tbl)
                 ))
```

# step 2 map source and target IDs to row indices

```{r}
edges_tbl <- edges_tbl %>%
  left_join(id_map , by = c("source" = "id")) %>%
  rename(from = index) %>%
  left_join(id_map, by=c("target" = "id")) %>%
  rename(to = index)

```



# step 3 filter out any unmatched

```{r}
edges_tbl <- edges_tbl %>%
  filter(!is.na(from),!is.na(to))

```

# step 4 creating the graph
```{r}
graph <- tbl_graph(nodes = nodes_tbl,
                   edges = edges_tbl,
                   directed = kg$directed)
```

# Visualising the knowledge graph

```{r}
set.seed(1234)
```

#Visualising the whole graph

```{r}
ggraph(graph, layout = "fr") +
  geom_edge_link(alpha = 0.3,
                 colour = "gray") +
  geom_node_point(aes(color = `Node Type`),
                  size = 4) +
  geom_node_text(aes(label = name),
                 repel = TRUE,
                 size = 2.5) +
  theme_void()
```


#### Step 1 : Filter edges to only "Memberof"

```{r}
graph_memberof <- graph %>%
  activate(edges) %>%
  filter(`Edge Type` == "MemberOf")
```

# step2 Extract only connected nodes
```{r}
used_node_indices <- graph_memberof %>%
  activate(edges) %>%
  as_tibble() %>%
  select(from, to) %>%
  unlist() %>%
  unique()
```

# step 3 

```{r}
graph_memberof <- graph_memberof %>%
  activate(nodes) %>%
  mutate(row_id = row_number()) %>%
  filter(row_id %in% used_node_indices) %>%
  select(-row_id)  #optional cleanup
```


# step 4
```{r}

ggraph(graph_memberof, layout = "fr") +
  geom_edge_link(alpha = 0.5, colour = "gray") +
  geom_node_point(aes(color = `Node Type`), size = 1) +
  geom_node_text(aes(label = name), repel = TRUE, size = 2.5) +
  theme_void()
```




